* Lagrange Interpolation

#+CAPTION: An example of a table of values
#+NAME: table-1
#+attr_latex: environment tabular: width \textwidth :align lcr
#+LATEX_HEADER: \usepackage{tabularx,siunitx,booktabs}

From the definition of gradient, we take three points (X,$f(x)) , (x_{0, f(x_{0}}) and (x_{1, f(x_{1}})

| X      | x_{0}      | x_{1}      |
|--------+---------+---------|
| $f(x)$ | $f(x_{0})$ | $f(x_{1})$ |



#+BEGIN_SRC python

#!python
#lagrange.py x0, x1, f(x0), f(x1) X
from argparse import ArgumentParser

def foX(X,x0=0,x1=0,f_x0=0,f_x1=0):
    x0_x1=x0-x1
    x0_X=x0-X
    X_x1=X-x1
    f_x1=f_x1
    f_x0=f_x0
    f_X=( (x0_X*f_x1)/x0_x1 ) + ( (X_x1*f_x0)/x0_x1 )
    return f_X

if __name__=='__main__':
    parser=ArgumentParser()
    parser.add_argument('-x0',action='store',dest='x0',help="X0 value",type=float)
    parser.add_argument('-x1',action='store',dest='x1',help="X1 value",type=float)
    parser.add_argument('-f_x0',action='store',dest='f_x0',help="f_X0 value",type=float)
    parser.add_argument('-f_x1',action='store',dest='f_x1',help="f_X1 value",type=float)
    parser.add_argument('-X',action='store',dest='X',help="X value to interpolate",type=float)
    args=parser.parse_args()
    print("f(%f) is %f"%(args.X,foX(args.X,args.x0,args.x1,args.f_x0,args.f_x1)))
#+END_SRC

